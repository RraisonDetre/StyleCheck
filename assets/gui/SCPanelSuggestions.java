package assets.gui;

/**
 * Class to enclose the formatting options and
 * pre-trained thresholds for side-panel suggestions
 * in the GUI. All of the "magic constants" were
 * generated by a script that profiled and read each
 * of the works in the corpus (subset of Project Gutenberg's
 * top 100 authors, approximately 4-5 works each).
 *
 * Written for the StyleCheck program by Alex Welton.
 *
 */
public final class SCPanelSuggestions {

    // For highlighting and display
    public static final String RED_HIGHLIGHT = "highlighted in red";
    public static final String GREEN_HIGHLIGHT = "highlighted in green";
    public static final String BLUE_HIGHLIGHT = "highlighted in blue";

    /**
     * Get the positions to be highlighted in order. A value of -1
     * means the phrase does not appear and no highlight should exist.
     * @param info - the text
     * @return the positions to highlight
     */
    public static int[] getHighlightPositions(String info) {
        return new int[] { info.indexOf(RED_HIGHLIGHT),
                info.indexOf(GREEN_HIGHLIGHT), info.indexOf(BLUE_HIGHLIGHT) };
    }


    /////       SPELLING AND GRAMMAR        /////


    /**
     * Get the full side panel string for spelling and grammar
     * @param sErrors - the number of spelling errors
     * @param gErrors - the number of grammar errors
     * @return the new side panel string
     */
    public static String getPanelSpellingGrammarString(int sErrors, int gErrors) {
        return getPanelSpellingString(sErrors) + getPanelGrammarString(gErrors);
    }

    public static final String SPELLING_INTRO
            = "\nYour document has been analyzed for possible " +
            "spelling mistakes using a dictionary of all valid " +
            "English words. Spelling mistakes are highlighted in red. " +
            "Clicking on one of these mistakes will yield a suggestion box " +
            "with suggested replacements, as well as the option to add the " +
            "marked word to the dictionary.\n";

    /**
     * Retrieve the full spelling string for the side panel
     * @param errors - the number of spelling errors
     * @return the spelling string for the side panel
     */
    public static String getPanelSpellingString(int errors) {
        return SPELLING_INTRO + "\nNumber of spelling errors: " + errors + ".\n";
    }

    public static final String GRAMMAR_INTRO
            = "\nPossible grammar errors in your document are highlighted " +
            "in green. These errors are identified by parsing the structure " +
            "of each sentence and checking against corpora of both valid English " +
            "grammar rules and commonly misused words. Clicking on one of the " +
            "highlighted areas will yield suggested replacements for that area.\n";

    /**
     * Retrieve the full grammar string for the side panel
     * @param errors - the number of grammar errors
     * @return the grammar string for the side panel
     */
    public static String getPanelGrammarString(int errors) {
        return GRAMMAR_INTRO + "\nNumber of grammar errors: " + errors + ".\n";
    }


    /////       STYLE       /////


    // Intro blurb for the style section of the panel
    public static final String STYLE_INTRO
            = "\nThe following document-wide style suggestions are " +
            "generated using a statistical comparison between your " +
            "text and a corpus of \"canonical\" works by English-speaking " +
            "authors.\n";

    /**
     * Method for constructing the style side panel String.
     * @param wc - the word count
     * @param richness - the richness score of the document
     * @param senLength - the sentence length score
     * @param senVar - the sentence length variance
     * @param advW - adverb word score
     * @param advS - adverb sentence score
     * @param vW - verb word score
     * @param vS - verb sentence score
     * @param adjW - adjective word score
     * @param adjS - adjective sentence score
     * @param nW - noun word score
     * @param nS - noun sentence score
     * @return the full side panel string
     */
    public static String getPanelStyleString(int wc, double richness,
                                             double senLength, double senVar,
                                             double advW, double advS,
                                             double vW, double vS,
                                             double adjW, double adjS,
                                             double nW, double nS) {
        if (!isLongEnoughForStyle(wc)) { return TOO_SHORT_BLURB; }
        return STYLE_INTRO + getFullVocabString(richness)
                + getFullSentenceString(senLength, senVar)
                + getFullPOSString(advW, advS, vW, vS, adjW, adjS, nW, nS);
    }

    /////       MINIMUM LENGTH CHECKING     /////

    // Minimum size for qualitative feedback
    public static final int MIN_WORDS_REQUIRED = 250;
    public static final String TOO_SHORT_BLURB
            = "\nThis document is too short to analyze for stylistic features " +
            "such as vocabulary richness and sentence rhythm. The minimum " +
            "number of words to display style suggestions is " + MIN_WORDS_REQUIRED + ".\n";

    /**
     * Return true if a document is long enough to perform
     * qualitative analysis on.
     * @param wordCount - the document to check
     * @return the appropriate boolean
     */
    public static boolean isLongEnoughForStyle(int wordCount) {
        return wordCount >= MIN_WORDS_REQUIRED;
    }

    /////       GENERAL GRADING     /////

    // Grades
    public static final int LOW = 1;
    public static final int LOW_MID = 2;
    public static final int MID = 3;
    public static final int MID_HIGH = 4;
    public static final int HIGH = 5;

    // Thresholds for number of standard deviations above/below average
    public static final double LOW_THRESHOLD = Double.MIN_VALUE;
    public static final double LOW_MID_THRESHOLD = 0.0;
    public static final double MID_THRESHOLD = 1.5;
    public static final double MID_HIGH_THRESHOLD = 3.0;
    public static final double HIGH_THRESHOLD = 4.5;
    public static final double GRADE_THRESHOLDS[] = {
            LOW_THRESHOLD, LOW_MID_THRESHOLD, MID_THRESHOLD,
            MID_HIGH_THRESHOLD, HIGH_THRESHOLD
    };

    /**
     * Get the appropriate grade string for the number of standard
     * deviations above or below average
     * @param stdDev - the number of standard deviations
     * @return the number of standard deviations
     */
    public static String getGradeStringFromStdDevs(double stdDev) {
        return getGradeString(getGradeFromStdDevs(stdDev));
    }

    /**
     * Retrieve a grade based on the number of standard
     * deviations above or below an average.
     * @param stdDev - the number of std devs above or below avg
     * @return the grade
     */
    public static int getGradeFromStdDevs(double stdDev) {
        if (20 * stdDev >= HIGH_THRESHOLD) { return HIGH; }
        if (20 * stdDev >= MID_HIGH_THRESHOLD) { return MID_HIGH; }
        if (20 * stdDev >= MID_THRESHOLD) { return MID; }
        if (20 * stdDev >= LOW_MID_THRESHOLD) { return LOW_MID; }
        return LOW;
    }

    // General strings for giving "grades" about features
    public static final String GRADE_LOW = "Below average.";
    public static final String GRADE_LOW_MID = "Somewhat below average.";
    public static final String GRADE_MID = "Average.";
    public static final String GRADE_MID_HIGH = "Above average.";
    public static final String GRADE_HIGH = "Far above average.";
    public static final String GRADE_STRINGS[] = {
        GRADE_LOW, GRADE_LOW_MID, GRADE_MID, GRADE_MID_HIGH, GRADE_HIGH
    };

    /**
     * Retrieve the grade string for a given grade.
     * Grades are integers from 1-5, inclusive. Inputs
     * lower than 1 or higher than 5 will be rounded to 1 or 5.
     * @param grade - the grade
     * @return the appropriate grade string
     */
    public static String getGradeString(int grade) {
        if (grade < 1) { return GRADE_STRINGS[0]; }
        else if (grade > 5) { return GRADE_STRINGS[4]; }
        else { return GRADE_STRINGS[grade - 1]; }
    }

    /////       VOCABULARY      /////

    public static final String VOCAB_BLURB
            = "\nThe vocabulary richness score is a measure " +
            "of the word choice diversity in your document. A low " +
            "score may indicate an undesirable level of repetition, " +
            "where a very high score may suggest wordiness.\n";

    // Vocabulary richness scores
    public static final double RICHNESS_AVG = 1.968;
    public static final double RICHNESS_STD_DEV = 0.136;

    /**
     * Get the full String for the side panel
     * @param richness the richness score
     * @return the full vocab String for the side panel
     */
    public static String getFullVocabString(double richness) {
        return VOCAB_BLURB + getVocabGradeString(richness);
    }

    /**
     * Get the appropriate grade string using a vocabulary richness score
     * @param richness - the vocabulary richness
     * @return the appropriate grade string
     */
    public static String getVocabGradeString(double richness) {
        if (Double.isInfinite(richness)) {
            return "\nVocabulary Richness Score: " + getGradeString(LOW) + "\n";
        }
        return "\nVocabulary Richness Score: " + getGradeStringFromStdDevs(
                (richness - RICHNESS_AVG) / RICHNESS_STD_DEV) + "\n";
    }

    /////       POS USAGE       /////

    public static final String POS_BLURB
            = "\nThe following part-of-speech usage scores are based on " +
            "the ratios observed over a wide range of what is popularly " +
            "considered to be good writing. Your scores for four major " +
            "part-of-speech groups are listed below. Low scores suggest " +
            "a minimalist style, where high scores may indicate unwieldy " +
            "sentence structure. These scores reflect overall use in the " +
            "part-of-speech category; any specifically overused words in " +
            "the document are highlighted in blue. Clicking on these words " +
            "will display suggested synonymous replacements.\n";

    // Adverbs
    public static final double ADVERB_WORD_AVG = 0.027535;
    public static final double ADVERB_WORD_STD_DEV = 0.0046112;
    public static final double ADVERB_SENTENCE_AVG = 0.013743;
    public static final double ADVERB_SENTENCE_STD_DEV = 0.0023016;

    // Verbs
    public static final double VERB_WORD_AVG = 0.054899;
    public static final double VERB_WORD_STD_DEV = 0.0080342;
    public static final double VERB_SENTENCE_AVG = 0.027374;
    public static final double VERB_SENTENCE_STD_DEV = 0.004395;

    // Adjectives
    public static final double ADJECTIVE_WORD_AVG = 0.022964;
    public static final double ADJECTIVE_WORD_STD_DEV = 0.0012262;
    public static final double ADJECTIVE_SENTENCE_AVG = 0.011477;
    public static final double ADJECTIVE_SENTENCE_STD_DEV = 0.00085384;

    // Nouns
    public static final double NOUN_WORD_AVG = 0.079637;
    public static final double NOUN_WORD_STD_DEV = 0.011856;
    public static final double NOUN_SENTENCE_AVG = 0.039775;
    public static final double NOUN_SENTENCE_STD_DEV = 0.0052302;

    /**
     * Get the full string for the POS section
     * @param advW - adverb word score
     * @param advS - adverb sentence score
     * @param vW - verb word score
     * @param vS - verb sentence score
     * @param adjW - adjective word score
     * @param adjS - adjective sentence score
     * @param nW - noun word score
     * @param nS - noun sentence score
     * @return the completed POS string
     */
    public static String getFullPOSString(double advW, double advS,
                                          double vW, double vS,
                                          double adjW, double adjS,
                                          double nW, double nS) {
        return POS_BLURB + getPOSGradeString(advW, advS, vW, vS, adjW, adjS, nW, nS);
    }

    /**
     * Get the grade string for all parts of speech
     * @param advW - adverb word score
     * @param advS - adverb sentence score
     * @param vW - verb word score
     * @param vS - verb sentence score
     * @param adjW - adjective word score
     * @param adjS - adjective sentence score
     * @param nW - noun word score
     * @param nS - noun sentence score
     * @return the grade string
     */
    public static String getPOSGradeString(double advW, double advS,
                                            double vW, double vS,
                                            double adjW, double adjS,
                                            double nW, double nS) {
        int advGrade = Math.floorDiv(getGradeFromStdDevs(
                (advW - ADVERB_WORD_AVG) / ADVERB_WORD_STD_DEV) +
                getGradeFromStdDevs((advS - ADVERB_SENTENCE_AVG)
                        / ADVERB_SENTENCE_STD_DEV), 2);
        int vGrade = Math.floorDiv(getGradeFromStdDevs(
                (vW - VERB_WORD_AVG) / VERB_WORD_STD_DEV) +
                getGradeFromStdDevs((vS - VERB_SENTENCE_AVG)
                        / VERB_SENTENCE_STD_DEV), 2);
        int adjGrade = Math.floorDiv(getGradeFromStdDevs(
                (adjW - ADJECTIVE_WORD_AVG) / ADJECTIVE_WORD_STD_DEV) +
                getGradeFromStdDevs((adjS - ADJECTIVE_SENTENCE_AVG)
                        / ADJECTIVE_SENTENCE_STD_DEV), 2);
        int nGrade = Math.floorDiv(getGradeFromStdDevs(
                (nW - NOUN_WORD_AVG) / NOUN_WORD_STD_DEV) +
                getGradeFromStdDevs((nS - NOUN_SENTENCE_AVG)
                        / NOUN_SENTENCE_STD_DEV), 2);
        return "\nAdverb Usage Score: " + getGradeString(advGrade)
                + "\nVerb Usage Score: " + getGradeString(vGrade)
                + "\nAdjective Usage Score: " + getGradeString(adjGrade)
                + "\nNoun Usage Score: " + getGradeString(nGrade) + "\n";
    }

    /////       SENTENCE RHYTHM     /////

    public static final String SENTENCE_BLURB
            = "\nThe following sentence rhythm scores, like the part-of-speech " +
            "scores, are based on data trained from the corpus of Western authors. " +
            "The first score is based on sentence length. A low score indicates brief, " +
            "curt sentences, where a high score suggests lengthy, verbose prose. The second " +
            "score measures the variation in sentence length in your document. A low " +
            "score may suggest monotony in rhythm, where a high score demonstrates varied " +
            "sentence structures.\n";

    // Sentence length
    public static final double SENTENCE_AVG = 0.0112825;
    public static final double SENTENCE_STD_DEV = 0.00413902;

    // Sentence length variation
    public static final double SENTENCE_VAR_AVG = 186.438;
    public static final double SENTENCE_VAR_STD_DEV = 69.8445;

    /**
     * Return the full sentence rhythm string
     * @param senLength - the sentence length score
     * @param senVar - the sentence length variance
     * @return the full sentence string
     */
    public static String getFullSentenceString(double senLength, double senVar) {
        return SENTENCE_BLURB + getSentenceGradeString(senLength, senVar);
    }

    /**
     * Return the grade string for sentence rhythm for a document
     * @param senLength - the sentence length score
     * @param senVar - the sentence length variance
     * @return the grade string
     */
    public static String getSentenceGradeString(double senLength, double senVar) {
        int lenGrade = getGradeFromStdDevs((senLength - SENTENCE_AVG) / SENTENCE_STD_DEV);
        int varGrade = getGradeFromStdDevs((senVar - SENTENCE_VAR_AVG) / SENTENCE_VAR_STD_DEV);
        return "\nSentence Length Score: " + getGradeString(lenGrade)
                + "\nSentence Variation Score: " + getGradeString(varGrade) + "\n";
    }

}
